
-- MySQL Script generated by MySQL Workbench
-- Thu Sep 27 15:29:52 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`veiculo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`veiculo` (
  `id_veiculo` INT NOT NULL AUTO_INCREMENT,
  `modelo_veiculo` VARCHAR(100) NOT NULL,
  `marca_veiculo` VARCHAR(100) NOT NULL,
  `ano_fabricacao_veiculo` INT(4) NOT NULL,
  `ano_modelo_veiculo` INT(4) NOT NULL,
  `placa_veiculo` VARCHAR(10) NULL,
  `chassi_veiculo` VARCHAR(20) NULL,
  `valor_veiculo` DECIMAL(10,2) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_veiculo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vendedor` (
  `id_vendedor` INT NOT NULL AUTO_INCREMENT,
  `nome_vendedor` VARCHAR(100) NOT NULL,
  `num_carros_vendidos_vendedor` INT(5) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_vendedor`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`venda_veiculo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`venda_veiculo` (
  `id_venda_veiculo` INT NOT NULL AUTO_INCREMENT,
  `veiculo_id_veiculo` INT NOT NULL,
  `vendedor_id_vendedor` INT NOT NULL,
  `data_venda_veiculo` DATE NOT NULL,
  `valor_venda_veiculo` DECIMAL(10,2) NOT NULL DEFAULT 0,
  `valor_comissao_venda_veiculo` DECIMAL(10,2) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_venda_veiculo`),
  FOREIGN KEY (`veiculo_id_veiculo`) REFERENCES `mydb`.`veiculo` (`id_veiculo`),
  FOREIGN KEY (`vendedor_id_vendedor`) REFERENCES `mydb`.`vendedor` (`id_vendedor`))
ENGINE = InnoDB;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Inserir valores na tabela veiculo
-- -----------------------------------------------------

INSERT INTO `mydb`.`veiculo`
(`id_veiculo`,
`modelo_veiculo`,
`marca_veiculo`,
`ano_fabricacao_veiculo`,
`ano_modelo_veiculo`,
`placa_veiculo`,
`chassi_veiculo`,
`valor_veiculo`)
VALUES
(1, 'Civic', 'Honda', 2017, 2018, 'HJA-9831', 99933182, 94374),
(2, 'Corolla', 'Toyota', 2016, 2016, 'HJC-9931', 99398103, 86346),
(3, 'Camaro', 'Chevrolet', 2014, 2015, 'HAV-8829', 99288131, 186711),
(4, 'Freemont', 'Fiat', 2011, 2012, 'FLJ-3128', 77312993, 52660),
(5, 'HRV', 'Honda', 2016, 2016, 'FAY-8221', 88331293, 84164);

-- -----------------------------------------------------
-- Inserir valores na tabela vendedor
-- -----------------------------------------------------

INSERT INTO `mydb`.`vendedor`
(`id_vendedor`,
`nome_vendedor`,
`num_carros_vendidos_vendedor`)
VALUES
(1, 'Carlos', 1),
(2, 'Joaquim', 1),
(3, 'Júlia', 0),
(4, 'Letícia', 0),
(5, 'Roberto', 0);

-- 4. Crie um procedimento com as seguintes características e que realize as seguintes tarefas:
-- Nome do procedimento: vender_veiculo
-- Parâmetros de entrada: id do veiculo, id do vendedor.
-- Parâmetros de saída: valor comissão venda.


-- Muda o final da execução de ; para $$
delimiter $$

-- Cria o procedimento vender_veiculo com entrada de 2 valores Codigo veiculo e codigo vendedor
-- Tendo como saida valor da comissão a venda do veiculo;
CREATE PROCEDURE vender_veiculo(IN veiculo INT, IN vendedor INT, OUT valor_comissao_venda DECIMAL)

-- Inicia o procedimento
BEGIN

-- Armazena a data atual na variavel criada  @dt_venda_veiculo
SET @dt_venda_veiculo = curdate();

-- Armazer o valor 0 na variavel @valor
SET @valor = 0;

-- Seleciona na tabela veiculo buscando o valor do veiculo pelo codigo do veiculo digitado
-- e armazena o valor do veiculo na variavel @valor.
SELECT valor_veiculo INTO @valor FROM veiculo
WHERE id_veiculo = veiculo;

-- Armazena na variavel @valor_comissao_venda_veiculo a comissão de 2% calculada sobre o valor
-- do veiculo armazenado na variavel @valor.
SET @valor_comissao_venda_veiculo = (@valor * 0.02);

-- Seleciona a variavel @valor_comissao_venda_veiculo e joga na saida valor_comissao_venda;
SELECT @valor_comissao_venda_veiculo INTO valor_comissao_venda;

-- Insere na tabela venda_veiculos os dados digitados pelo usuario
INSERT INTO venda_veiculo (veiculo_id_veiculo, vendedor_id_vendedor,  data_venda_veiculo, 
valor_venda_veiculo, valor_comissao_venda_veiculo)

-- Insere os valores do procedimento veiculo(veiculo_id_veiculo), vendedor(vendedor_id_vendedor),
-- @dt_venda_veiculo(data_venda_veiculo), valor_venda_veiculo(@valor) e valor_comissao_venda(valor_comissao_venda_veiculo)
VALUE (veiculo, vendedor,  @dt_venda_veiculo, @valor, valor_comissao_venda);

-- Fim do  procedimento
END $$

-- Muda o final do delimitador de execução de $$ para ;
delimiter ;

-- 5. Crie as seguintes visões:
-- • Mostrar o nome do veículo, nome do vendedor, data de venda e valor da comissão
-- de venda do veículo (tabela derivada de venda_veiculo);

CREATE VIEW vendas_veiculos AS
SELECT modelo_veiculo Veiculo, nome_vendedor Vendedor, data_venda_veiculo Data, valor_comissao_venda_veiculo Comissão
FROM veiculo, vendedor, venda_veiculo
where venda_veiculo.veiculo_id_veiculo = veiculo.id_veiculo
AND venda_veiculo.vendedor_id_vendedor = vendedor.id_vendedor;

-- • Mostrar o nome e valor de venda de todos os carros vendidos em setembro/2018;

CREATE VIEW vendas_periodo AS
SELECT modelo_veiculo Veículo, valor_veiculo Valor
FROM veiculo, venda_veiculo
where venda_veiculo.veiculo_id_veiculo = veiculo.id_veiculo
AND data_venda_veiculo >= '2018-09-01' AND data_venda_veiculo <= '2018-09-30';

-- • Mostrar o nome do vendedor que realizou o maior montante (em valor somado) de vendas.

CREATE VIEW vendas_vendedor AS
SELECT nome_vendedor Nome
FROM vendedor, venda_veiculo
where venda_veiculo.vendedor_id_vendedor = vendedor.id_vendedor and vendedor.id_vendedor = vendedor.id_vendedor
ORDER BY sum(valor_venda_veiculo);

-- 6. Criar uma função que:
-- • Retorna o valor de vendas realizadas por um determinado vendedor (soma de todas
-- as vendas). Essa função terá como parâmetro de entrada o id do vendedor. 

-- Muda o final da execução de ; para $$
DELIMITER $$

-- Cria a função valor_vendedor com entrada do código d vendedor
CREATE FUNCTION Valor_Vendedor (vendedor int)

-- Retorna o valor da soma do vendedor em decima
RETURNS DECIMAl(10,2)

-- Inicia a função
BEGIN

-- Armazer o valor 0 na variavel @valor
SET @Valor = 0;

-- Busca na tabela venda_veiculo os valores dos veiculos vendidos e faz a soma desses valores e armazena a soma
-- na variavel valor buscando pelo codigo digitado pelo usuario
SELECT sum(valor_venda_veiculo) INTO @Valor FROM venda_veiculo
WHERE vendedor_id_vendedor = vendedor;

-- Retorna o valor armazenado na variavel valor
RETURN @Valor;

-- Fim do  procedimento
END $$

-- Muda o final do delimitador de execução de $$ para ;
DELIMITER ;


-- 7. Crie um gatilho que incremente a quantidade de vendas realizadas por um determinado
-- vendedor, e que será armazenado no campo num_carros_vendidos_vendedor da tabela
-- vendedor. O gatilho deve ser acionado toda vez que ocorrer uma inserção na tabela
-- venda_veiculo. 

-- Muda o final da execução de ; para $$
delimiter $$

-- Cria o gatilho vendas_realizadas
CREATE TRIGGER Vendas_Realizadas AFTER

-- Quando os dadossão inseridos na tabela venda_veiculo em cada linha
INSERT ON venda_veiculo
FOR EACH ROW

-- Inicia o gatilho
BEGIN

-- Atualiza a tabela  vendedor
UPDATE vendedor

-- Mudando a coluna num_carros_vendidos_vendedor que vai ser atualizada com o valor atual e somando mais 1
SET num_carros_vendidos_vendedor = num_carros_vendidos_vendedor + 1

-- Quando o id_vendedor na tabela vendedor for igual ao vendedor_id_vendedor na tabela venda_veiculo
WHERE id_vendedor = NEW.vendedor_id_vendedor;

-- Fim do  procedimento
END $$

-- Muda o final do delimitador de execução de $$ para ;
delimiter ;
